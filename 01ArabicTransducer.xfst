clear stack
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo NOUNS
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
source arb-nouns.xfst
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo VERBS
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
source arb-verbs.xfst
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo FUNCTION WORDS
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
source arb-fnwords.xfst
define digits [%0|1|2|3|4|5|6|7|8|9];
define Numbers digits+ [["+noun" "+card"]:0];
source arb-Alphabet.txt
define Alphabet
define forTrans [
"^ss^" -> [] ,
"^se^" -> []
]
.o.
["[" -> [] ]
.o.
["]" -> [] ]
;
define forMWE [
"^ss^" -> "[" ,
"^se^" -> "]"
];
define clUpperIntermedLang [
["+masc" -> 0 || _ "+fem",,
"+masc" -> 0 || _ "+masc",,
"+fem" -> 0 || _ "+fem",,
"+fem" -> 0 || _ "+masc"
]
.o.
[
"^orig" Alphabet "^orig" -> [],
"^dbl" digits "^dbl" -> []
]
.o.
[
"^orig" -> [],
"^dbl" -> [],
"^remya^" -> [] ,
"rrr" -> [] ,
"+token" -> %@
]
.o.
[%@ -> [] || _ %@ , .#. _ ]
];

define transliteration [
%{ n %@ -> %{,
%{ v %@ -> %{,
%_ ? %@ %} -> %}]
.o.
[i -> i || %{ ?* _ ?* %}]
.o.
[%} -> ئ || %{ ?* _ ?* %}]
.o.
[A -> ا || %{ ?* _ ?* %}]
.o.
[O -> أ || %{ ?* _ ?* %}]
.o.
[b -> ب || %{ ?* _ ?* %}]
.o.
[t -> ت || %{ ?* _ ?* %}]
.o.
[v -> ث || %{ ?* _ ?* %}]
.o.
[j -> ج || %{ ?* _ ?* %}]
.o.
[H -> ح || %{ ?* _ ?* %}]
.o.
[x -> خ || %{ ?* _ ?* %}]
.o.
[d -> د || %{ ?* _ ?* %}]
.o.
[%* -> ذ || %{ ?* _ ?* %}]
.o.
[r -> ر || %{ ?* _ ?* %}]
.o.
[z -> ز || %{ ?* _ ?* %}]
.o.
[s -> س || %{ ?* _ ?* %}]
.o.
[%$ -> ش || %{ ?* _ ?* %}]
.o.
[S -> ص || %{ ?* _ ?* %}]
.o.
[D -> ض || %{ ?* _ ?* %}]
.o.
[T -> ط || %{ ?* _ ?* %}]
.o.
[Z -> ظ || %{ ?* _ ?* %}]
.o.
[E -> ع || %{ ?* _ ?* %}]
.o.
[g -> غ || %{ ?* _ ?* %}]
.o.
[f -> ف || %{ ?* _ ?* %}]
.o.
[q -> ق || %{ ?* _ ?* %}]
.o.
[k -> ك || %{ ?* _ ?* %}]
.o.
[l -> ل || %{ ?* _ ?* %}]
.o.
[m -> م || %{ ?* _ ?* %}]
.o.
[n -> ن || %{ ?* _ ?* %}]
.o.
[h -> ه || %{ ?* _ ?* %}]
.o.
[p -> ة || %{ ?* _ ?* %}]
.o.
[w -> و || %{ ?* _ ?* %}]
.o.
[y -> ي || %{ ?* _ ?* %}]
.o.
[Y -> ى || %{ ?* _ ?* %}]
.o.
[%{ -> ا || %{ ?* _ ?* %}]
.o.
[%} -> ئ || %{ ?* _ ?* %}]
.o.
[%& -> ؤ || %{ ?* _ ?* %}]
.o.
[%> -> أ || %{ ?* _ ?* %}]
.o.
[%< -> إ || %{ ?* _ ?* %}]
.o.
[%' -> ء || %{ ?* _ ?* %}]
.o.
[%| -> آ || %{ ?* _ ?* %}]
.o.
[a -> َ || %{ ?* _ ?* %}]
.o.
[i -> ِ || %{ ?* _ ?* %}]
.o.
[u -> ُ || %{ ?* _ ?* %}]
.o.
[%~ -> ّ || %{ ?* _ ?* %}]
.o.
[F -> ً || %{ ?* _ ?* %}]
.o.
[N -> ٌ || %{ ?* _ ?* %}]
.o.
[K -> ٍ || %{ ?* _ ?* %}]
.o.
[o -> ْ || %{ ?* _ ?* %}]
;

define marktokens [
[
"+token" -> %@
]
.o.
[%@ -> [] || _ %@ , .#. _ ]
];
define cltokens [
%@ -> [],
"+token" -> []
]
;
define remExtras [
[
%@ -> "+token"
]
.o.
[
"+token" -> [] || _ "+token" , .#. _
]
];

! define remCashida
source arb-remcashida.txt

echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
echo TRANSDUCER
echo >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
read regex [[ArbNouns.i | ArbVerbs.i | ArbFNWords.i] .o. clUpperIntermedLang .o. forTrans .o. transliteration].i;
define ArabicTransducer
read regex [[ArabicTransducer .o. cltokens] | Numbers] .o. remCashida;
save stack ArabicTransducer.fst
clear stack

